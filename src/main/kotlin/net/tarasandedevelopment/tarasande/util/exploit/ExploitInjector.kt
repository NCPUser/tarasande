package net.tarasandedevelopment.tarasande.util.exploit

import net.minecraft.client.MinecraftClient
import net.minecraft.client.gui.screen.Screen
import net.minecraft.client.util.math.MatrixStack
import net.tarasandedevelopment.tarasande.TarasandeMain
import net.tarasandedevelopment.tarasande.base.module.Module
import net.tarasandedevelopment.tarasande.base.screen.cheatmenu.valuecomponent.ValueComponent
import net.tarasandedevelopment.tarasande.event.EventChildren
import net.tarasandedevelopment.tarasande.screen.cheatmenu.panel.impl.elements.PanelElements
import net.tarasandedevelopment.tarasande.screen.cheatmenu.panel.impl.minecraftbutton.PanelButton
import net.tarasandedevelopment.tarasande.screen.widget.panel.ClickableWidgetPanel
import net.tarasandedevelopment.tarasande.util.player.container.ContainerUtil
import net.tarasandedevelopment.tarasande.value.ValueButton

object ExploitInjector {

    private val exploits = HashMap<Class<out Screen>, List<Exploit>>()

    init {
        TarasandeMain.get().eventDispatcher.add(EventChildren::class.java) {
            this.get(it.screen).forEachIndexed { index, exploit ->
                it.add(PanelButton.createButton(MinecraftClient.getInstance().window.scaledWidth / 2 - 49, 5 + (index * 24), 98, 25, exploit.name) {
                    exploit.onClick.on()
                })
            }
        }
    }

    fun hook(screenClass: Class<out Screen>, name: String, action: Action, parent: Module) {
        val exploit = Exploit(name, action, parent)

        if (exploits.containsKey(screenClass)) {
            val old = exploits[screenClass]!!.toMutableList()
            old.add(exploit)
            exploits[screenClass] = old
        } else
            exploits[screenClass] = listOf(exploit)
    }

    fun get(screen: Screen): List<Exploit> {
        if (!exploits.containsKey(screen.javaClass)) return listOf()

        return exploits[screen.javaClass]!!.toMutableList().filter { e -> e.parent.enabled }
    }

    class Exploit(val name: String, val onClick: Action, val parent: Module)

    interface Action {
        fun on()
    }
}