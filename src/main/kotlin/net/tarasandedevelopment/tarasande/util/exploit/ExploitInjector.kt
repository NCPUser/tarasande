package net.tarasandedevelopment.tarasande.util.exploit

import net.minecraft.client.gui.screen.Screen
import net.minecraft.client.util.math.MatrixStack
import net.tarasandedevelopment.tarasande.TarasandeMain
import net.tarasandedevelopment.tarasande.base.module.Module
import net.tarasandedevelopment.tarasande.base.screen.cheatmenu.valuecomponent.ValueComponent
import net.tarasandedevelopment.tarasande.event.EventChildren
import net.tarasandedevelopment.tarasande.screen.cheatmenu.panel.impl.elements.PanelElements
import net.tarasandedevelopment.tarasande.screen.widget.panel.ClickableWidgetPanel
import net.tarasandedevelopment.tarasande.value.ValueButton

object ExploitInjector {

    private val exploits = HashMap<Class<out Screen>, List<Exploit>>()

    init {
        TarasandeMain.get().managerEvent.add {
            if (it is EventChildren) {
                if (get(it.screen).isNotEmpty()) {
                    it.add(ClickableWidgetPanel(generatePanel(it.screen)))
                }
            }
        }
    }

    fun hook(screenClass: Class<out Screen>, name: String, action: Action, parent: Module) {
        val exploit = Exploit(name, action, parent)

        if (exploits.containsKey(screenClass)) {
            val old = exploits[screenClass]!!.toMutableList()
            old.add(exploit)
            exploits[screenClass] = old
        } else
            exploits[screenClass] = listOf(exploit)
    }

    fun get(screen: Screen): List<Exploit> {
        if (!exploits.containsKey(screen.javaClass)) return listOf()

        return exploits[screen.javaClass]!!.toMutableList().filter { e -> e.parent.enabled }
    }

    private fun generatePanel(screen: Screen) = object : PanelElements<ValueComponent>("Exploits", 5.0, 5.0, 100.0, 0.0) {

        init {
            get(screen).forEach {
                elementList.add(TarasandeMain.get().screenCheatMenu.managerValueComponent.newInstance(object : ValueButton(this, it.name) {
                    override fun onChange() {
                        it.onClick.on()
                    }
                }))
            }
        }

        override fun render(matrices: MatrixStack?, mouseX: Int, mouseY: Int, delta: Float) {
            var endHeight = 2.0
            elementList.forEach {
                endHeight += it.getHeight() + 2.0
            }
            panelHeight = titleBarHeight + endHeight

            super.render(matrices, mouseX, mouseY, delta)
        }
    }

    class Exploit(val name: String, val onClick: Action, val parent: Module) {
    }

    interface Action {
        fun on()
    }
}