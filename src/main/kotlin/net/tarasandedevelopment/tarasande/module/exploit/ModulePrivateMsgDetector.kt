package net.tarasandedevelopment.tarasande.module.exploit

import com.google.common.collect.Multimap
import com.google.common.collect.MultimapBuilder
import net.minecraft.client.MinecraftClient
import net.minecraft.network.packet.s2c.play.ChatMessageS2CPacket
import net.minecraft.network.packet.s2c.play.MessageHeaderS2CPacket
import net.tarasandedevelopment.tarasande.base.event.Event
import net.tarasandedevelopment.tarasande.base.module.Module
import net.tarasandedevelopment.tarasande.base.module.ModuleCategory
import net.tarasandedevelopment.tarasande.event.EventPacket
import net.tarasandedevelopment.tarasande.util.chat.CommunicationUtil
import java.util.*
import java.util.function.Consumer

class ModulePrivateMsgDetector : Module("Private msg detector", "Detects private conversations using signatures", ModuleCategory.EXPLOIT) {

    private val signatures: Multimap<UUID, ByteArray> = MultimapBuilder.hashKeys().hashSetValues().build()

    val eventConsumer = Consumer<Event> { event ->
        when (event) {
            is EventPacket -> {
                if (event.type != EventPacket.Type.RECEIVE) return@Consumer

                if (event.packet is MessageHeaderS2CPacket) {
                    val sender = MinecraftClient.getInstance().world!!.getPlayerByUuid(event.packet.header.sender)
                    val senderName = sender?.name?.string
                    val signature = event.packet.headerSignature.data
                    
                    if (sender != null) {
                        this.signatures.put(sender.uuid, signature)
                        CommunicationUtil.printInformation(this, "$senderName just sent a private message!")
                    }
                }
                
                if (event.packet is ChatMessageS2CPacket) {
                    for (entry in event.packet.message.signedBody.lastSeenMessages.entries) {
                        if (entry.profileId == event.packet.message.signedHeader.sender)
                            continue

                        val signaturesLocal = this.signatures.get(event.packet.message.signedHeader.sender)

                        for (bytes in signaturesLocal) {
                            if (Arrays.equals(bytes, entry.lastSignature.data)) {
                                val receiver = MinecraftClient.getInstance().world!!.getPlayerByUuid(event.packet.message.signedHeader.sender)
                                val sender = MinecraftClient.getInstance().world!!.getPlayerByUuid(entry.profileId)

                                if (sender != receiver) {
                                    CommunicationUtil.printInformation(this, receiver!!.name.string + " received a private message from " + sender!!.name.string + "!")
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
