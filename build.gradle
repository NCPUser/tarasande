import su.mandora.codechecker.CodeChecker

plugins {
	id "fabric-loom"
	id "org.jetbrains.kotlin.jvm"
	id "com.github.johnrengelman.shadow"
}

archivesBaseName = "tarasande"
version = "1.19"
group = "net.tarasandedevelopment"

def libs = [
		// Proxy -> https://mvnrepository.com/artifact/io.netty/netty-handler-proxy
		"io.netty:netty-handler-proxy:4.1.82.Final",

		// BungeeCord Chat -> https://mvnrepository.com/artifact/net.md-5/bungeecord-chat
		"net.md-5:bungeecord-chat:1.16-R0.4",

		// HAProxy Protocol -> https://mvnrepository.com/artifact/io.netty/netty-codec-haproxy
		"io.netty:netty-codec-haproxy:4.1.82.Final",

		// Easing Functions -> https://github.com/FlorianMichael/eZEasing
		"com.github.FlorianMichael:eZEasing:8d90aafa6e"
]

loom {
	accessWidenerPath = file("src/main/resources/tarasande.accesswidener")
}

allprojects {
	repositories {
		maven {
			url = "https://oss.sonatype.org/content/repositories/snapshots"
		}
		maven {
			url = "https://repo.viaversion.com"
		}
		maven {
			url = "https://jitpack.io"
		}
		mavenCentral()
	}
}

subprojects {
	apply plugin: "java"
	dependencies {
		for (final def lib in libs) {
			implementation(lib) {
				transitive = false
			}
		}
	}
}

dependencies {
	// Fabric
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Kotlin
	modImplementation "net.fabricmc:fabric-language-kotlin:${project.kotlin_wrapper_version}"

	for (final def lib in libs) {
		implementation(lib)
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

remapJar {
	dependsOn shadowJar
    //noinspection GrDeprecatedAPIUsage
	input.set(shadowJar.archiveFile)
}

shadowJar {
	archiveClassifier.set("shadow")
	compileJava.options.encoding = "UTF-8"
	exclude "native-binaries/*"

	dependencies {
		for (final def lib in libs) {
			include(dependency(lib))
		}
	}
}

compileKotlin.kotlinOptions.jvmTarget = "17"

task checkCode {
	group "Code checker"
	doLast {
		CodeChecker codeChecker = new CodeChecker(sourceSets.main)
		codeChecker.ignore("de/florianmichael")
		codeChecker.ignore("clamp_protocolhack.mixins.json")

		codeChecker.ignore("net/tarasandedevelopment/tarasande/protocolhack/provider")
		codeChecker.check()
	}
}