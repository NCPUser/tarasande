import su.mandora.codechecker.CodeChecker

plugins {
	id "fabric-loom"
	id "org.jetbrains.kotlin.jvm"
	id "com.github.johnrengelman.shadow"
}

archivesBaseName = "tarasande"
version = "1.19"
group = "net.tarasandedevelopment"

repositories {
	maven {
		url = "https://oss.sonatype.org/content/repositories/snapshots"
	}
	maven {
		url = "https://repo.viaversion.com"
	}
	maven {
		url = "https://jitpack.io"
	}
	mavenCentral()
}

def libs = [
		// Proxy -> https://mvnrepository.com/artifact/io.netty/netty-handler-proxy
		"io.netty:netty-handler-proxy:4.1.82.Final",

		// BungeeCord Chat -> https://mvnrepository.com/artifact/net.md-5/bungeecord-chat
		"net.md-5:bungeecord-chat:1.16-R0.4",

		// HAProxy Protocol -> https://mvnrepository.com/artifact/io.netty/netty-codec-haproxy
		"io.netty:netty-codec-haproxy:4.1.82.Final",

		// Easing Functions -> https://github.com/FlorianMichael/eZEasing
		"com.github.FlorianMichael:eZEasing:8d90aafa6e"
]

// ViaProtocolHack READ-ME
var viaLibs = [
		"com.viaversion:viaversion:4.5.0-1.19.3-pre1-SNAPSHOT",
		"com.viaversion:viabackwards-common:4.5.0-22w46a-SNAPSHOT",
		"org.yaml:snakeyaml:1.29",

		"com.github.RejectedVia:ViaProtocolHack:ea6ccc49e2"
]

loom {
	accessWidenerPath = file("src/main/resources/tarasande.accesswidener")
}

dependencies {
	// Fabric
	minecraft "com.mojang:minecraft:1.19.2"
	mappings "net.fabricmc:yarn:1.19.2+build.28:v2"
	modImplementation "net.fabricmc:fabric-loader:0.14.10"

	// Kotlin
	modImplementation "net.fabricmc:fabric-language-kotlin:1.8.4+kotlin.1.7.20"

	for (final def lib in libs) {
		implementation(lib)
	}
	for (final def via in viaLibs) {
		implementation(via)
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

remapJar {
	dependsOn shadowJar
    //noinspection GrDeprecatedAPIUsage
	input.set(shadowJar.archiveFile)
}

shadowJar {
	archiveClassifier.set("shadow")
	compileJava.options.encoding = "UTF-8"
	exclude "native-binaries/*"

	dependencies {
		for (final def lib in libs) {
			include(dependency(lib))
		}
		for (final def lib in viaLibs) {
			include(dependency(lib))
		}
	}
}

compileKotlin.kotlinOptions.jvmTarget = "17"

task checkCode {
	group "Code checker"
	doLast {
		CodeChecker codeChecker = new CodeChecker(sourceSets.main)
		codeChecker.ignore("de/florianmichael")
		codeChecker.ignore("clamp_protocolhack.mixins.json")

		codeChecker.ignore("net/tarasandedevelopment/tarasande/protocolhack/provider")
		codeChecker.check()
	}
}