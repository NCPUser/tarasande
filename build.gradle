plugins {
	id "fabric-loom"
	id "org.jetbrains.kotlin.jvm"
	id "com.github.johnrengelman.shadow"
}

//noinspection GroovyUnusedAssignment
archivesBaseName = "tarasande"
version = "1.8.7"
group = "net.tarasandedevelopment"

repositories {
	maven {
		url = "https://oss.sonatype.org/content/repositories/snapshots"
	}
	maven {
		url = "https://repo.viaversion.com"
	}
	maven {
		url = "https://jitpack.io"
	}
	mavenCentral()
}

var libs = [
		// Proxy -> https://mvnrepository.com/artifact/io.netty/netty-handler-proxy
        "io.netty:netty-handler-proxy:4.1.82.Final",

		// Protocol Hack (-> older servers) -> https://github.com/ViaVersion/ViaVersion
		"com.viaversion:viaversion:4.5.0-22w42a-SNAPSHOT",

		// Protocol Hack (-> newer servers) -> https://github.com/ViaVersion/ViaBackwards
		"com.viaversion:viabackwards-common:4.5.0-22w42a-SNAPSHOT",

		// Snake YML -> https://github.com/snakeyaml/snakeyaml
		"org.yaml:snakeyaml:1.29",

		// BungeeCord Chat -> https://mvnrepository.com/artifact/net.md-5/bungeecord-api
		"net.md-5:bungeecord-api:1.16-R0.4",

		// Packet Library -> https://github.com/FlorianMichael/PacketMinecraft
		"com.github.FlorianMichael:PacketMinecraft:f594e5a6c0",

		// HAProxy Protocol -> https://mvnrepository.com/artifact/io.netty/netty-codec-haproxy
		"io.netty:netty-codec-haproxy:4.1.82.Final",

		// Via Protocol Hack -> https://github.com/RejectedVia/ViaProtocolHack
		"com.github.RejectedVia:ViaProtocolHack:5ddb5c87c8"
]

loom {
	accessWidenerPath = file("src/main/resources/tarasande.accesswidener")
}

dependencies {
	// Fabric
    minecraft "com.mojang:minecraft:1.19.2"
    mappings "net.fabricmc:yarn:1.19.2+build.21:v2"
    modImplementation "net.fabricmc:fabric-loader:0.14.9"

	// Kotlin
	modImplementation "net.fabricmc:fabric-language-kotlin:1.8.4+kotlin.1.7.20"

	for (final def lib in libs) {
		implementation(lib)
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

remapJar {
	dependsOn shadowJar
    //noinspection GrDeprecatedAPIUsage
	input.set(shadowJar.archiveFile)
}

shadowJar {
    archiveClassifier.set("shadow")
    compileJava.options.encoding = "UTF-8"
	exclude "native-binaries/*"

    dependencies {
		for (final def lib in libs) {
			include(dependency(lib))
		}
    }
}

compileKotlin.kotlinOptions.jvmTarget = "17"
