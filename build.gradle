import su.mandora.codechecker.CodeChecker

plugins {
	id "fabric-loom"
	id "org.jetbrains.kotlin.jvm"
	id "com.github.johnrengelman.shadow"
}

archivesBaseName = "tarasande"
version = tarasande_version
group = "net.tarasandedevelopment"

def libs = [
		"io.netty:netty-handler-proxy:4.1.82.Final"
]

loom {
	accessWidenerPath = file("src/main/resources/tarasande.accesswidener")
}

allprojects {
	repositories {
		maven {
			url = "https://oss.sonatype.org/content/repositories/snapshots"
		}
		maven {
			url = "https://repo.viaversion.com"
		}
		maven {
			url = "https://jitpack.io"
		}
		mavenCentral()
	}
}

subprojects {
	apply plugin: "java"
	dependencies {
		for (final def lib in libs) {
			implementation(lib) {
				transitive = false
			}
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	for (final def lib in libs) {
		implementation(lib)
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

this.remapJar {
	dependsOn shadowJar
    //noinspection GrDeprecatedAPIUsage
	input.set(shadowJar.archiveFile)
}

this.shadowJar {
	archiveClassifier.set("shadow")
	compileJava.options.encoding = "UTF-8"
	exclude "native-binaries/*"

	dependencies {
		for (final def lib in libs) {
			include(dependency(lib))
		}
	}
}

compileKotlin.kotlinOptions.jvmTarget = "17"

tasks.register('checkCode') {
	group archivesBaseName
	dependsOn "build"
	doLast {
		CodeChecker codeChecker = new CodeChecker(sourceSets.main)
		codeChecker.check()
	}
}

tasks.register('installPackages') {
	group archivesBaseName
	dependsOn "build"
	doLast {
		File base = file(".")
		base.listFiles().each {
			if (it.name.startsWith("package") && it.isDirectory()) {
				String packageName = it.name + "-" + project(it.name).version + ".jar"
				File build = new File(it, "build" + File.separator + "libs" + File.separator + packageName)
				File modDest = new File(base, "run" + File.separator + "mods" + File.separator + packageName)
				if(build.exists()) {
					if (modDest.delete())
						println "Deleted old $packageName"
					else
						println "Failed to delete old $packageName version"
					if (build.renameTo(modDest))
						println "Copied $packageName"
				}
			}
		}
	}
}
