package de.florianmichael.tarasande_dupe_exploits.command

import com.google.common.collect.Lists
import com.mojang.brigadier.builder.LiteralArgumentBuilder
import de.florianmichael.tarasande_dupe_exploits.TarasandeDupeExploits
import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap
import net.minecraft.command.CommandSource
import net.minecraft.item.ItemStack
import net.minecraft.item.Items
import net.minecraft.nbt.NbtList
import net.minecraft.nbt.NbtString
import net.minecraft.network.packet.c2s.play.BookUpdateC2SPacket
import net.minecraft.network.packet.c2s.play.ClickSlotC2SPacket
import net.minecraft.screen.slot.SlotActionType
import net.tarasandedevelopment.tarasande.mc
import net.tarasandedevelopment.tarasande.system.feature.commandsystem.Command
import net.tarasandedevelopment.tarasande.util.player.chat.CustomChat
import net.tarasandedevelopment.tarasande.util.string.StringUtil
import java.util.*

class CommandBookDupe : Command("bookdupe") {

    private val dupeBook = ItemStack(Items.WRITABLE_BOOK, 1)
    private var trashList = ArrayList<String>()

    init {
        val stringBuilder = StringBuilder()
        for (i in 0..21844) stringBuilder.append(2048.toChar())

        trashList.add(stringBuilder.toString())

        for (i in 1..39) {
            trashList.add("a".repeat(256))
        }

        dupeBook.setSubNbt("title", NbtString.of("a"));
        val listTag = NbtList()
        for (s in trashList) {
            listTag.add(NbtString.of(s))
        }
        dupeBook.setSubNbt("pages", listTag)
    }

    private fun execute(click: Boolean = false) {
        if (mc.player!!.inventory.mainHandStack.isOf(Items.WRITABLE_BOOK)) {
            mc.networkHandler!!.sendPacket(BookUpdateC2SPacket(mc.player!!.inventory.selectedSlot, trashList, Optional.of("a")))
            if (click) {
                mc.networkHandler!!.sendPacket(ClickSlotC2SPacket(mc.player!!.currentScreenHandler.syncId, 36 + mc.player!!.inventory.selectedSlot, 0, 0, SlotActionType.THROW, dupeBook, TarasandeDupeExploits.dummyModifiers()))
            }
        } else {
            CustomChat.printChatMessage("You need to hold a " + StringUtil.uncoverTranslation(Items.WRITABLE_BOOK.translationKey) + " to do the glitch")
        }
    }

    override fun builder(builder: LiteralArgumentBuilder<CommandSource>): LiteralArgumentBuilder<CommandSource> {
        builder.then(literal("click").executes {
            execute(true)
            return@executes SUCCESS
        })
        return builder.executes {
            execute()
            return@executes SUCCESS
        }
    }
}
